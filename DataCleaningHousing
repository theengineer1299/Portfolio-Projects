


-- Cleaning Data in SQL


Select*
From [Portfolio Project]..NashvilleHousing




-------------------------------------------------------------------------------------------------------------------------

-- Standardizing the Date Format


Select SaleDateConverted, CONVERT(Date, SaleDate)
From [Portfolio Project]..NashvilleHousing


Update [Portfolio Project]..NashvilleHousing
Set SaleDate = CONVERT(Date, SaleDate)

Alter Table [Portfolio Project]..NashvilleHousing
Add SaleDateConverted Date ;

Update [Portfolio Project]..NashvilleHousing
Set SaleDateConverted = CONVERT(Date, SaleDate)



-----------------------------------------------------------------------------------------------------------------------

-- Populating Property Address Data using Self Join

Select *
From [Portfolio Project]..NashvilleHousing
--Where PropertyAddress is NULL
Order by ParcelID


Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress, b.PropertyAddress)
From [Portfolio Project]..NashvilleHousing a
JOIN [Portfolio Project]..NashvilleHousing b
on a.ParcelID = b.ParcelID
AND a.[UniqueID ] <> b.[UniqueID ]
Where a.PropertyAddress is NULL


Update a
SET PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
From [Portfolio Project]..NashvilleHousing a
JOIN [Portfolio Project]..NashvilleHousing b
on a.ParcelID = b.ParcelID
AND a.[UniqueID ] <> b.[UniqueID ]
Where a.PropertyAddress is NULL



--------------------------------------------------------------------------------------------------------------

-- Spearating the Address into individual columns (Address, City, State) using SUBSTRING, PARSENAME


Select PropertyAddress
From [Portfolio Project]..NashvilleHousing
--Where PropertyAddress is NULL


---------- Use of SUBSTRING

Select
SUBSTRING(PropertyAddress, 1, CHARINDEX(',',PropertyAddress) -1) as Address
, SUBSTRING(PropertyAddress, CHARINDEX(',',PropertyAddress) +1, LEN(PropertyAddress)) as Address

From [Portfolio Project]..NashvilleHousing


Alter Table [Portfolio Project]..NashvilleHousing
Add PropertySplitAddress Nvarchar(255);

Update [Portfolio Project]..NashvilleHousing
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 )

Alter Table [Portfolio Project]..NashvilleHousing
Add PropertySplitCity Nvarchar(255) ;

Update [Portfolio Project]..NashvilleHousing
Set PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',',PropertyAddress) +1, LEN(PropertyAddress))


Select *
From [Portfolio Project]..NashvilleHousing


---------- Use of PARSENAME



Select OwnerAddress
From [Portfolio Project]..NashvilleHousing


Select
PARSENAME(Replace(OwnerAddress,',','.'), 3)
, PARSENAME(Replace(OwnerAddress,',','.'), 2)
,PARSENAME(Replace(OwnerAddress,',','.'), 1)

From [Portfolio Project]..NashvilleHousing



Alter Table [Portfolio Project]..NashvilleHousing
Add OwnerSplitAddress Nvarchar(255);

Update [Portfolio Project]..NashvilleHousing
SET OwnerSplitAddress = PARSENAME(Replace(OwnerAddress,',','.'), 3)

Alter Table [Portfolio Project]..NashvilleHousing
Add OwnerSplitCity Nvarchar(255) ;

Update [Portfolio Project]..NashvilleHousing
Set OwnerSplitCity = PARSENAME(Replace(OwnerAddress,',','.'), 2)


Alter Table [Portfolio Project]..NashvilleHousing
Add OwnerSplitState Nvarchar(255) ;

Update [Portfolio Project]..NashvilleHousing
Set OwnerSplitState = PARSENAME(Replace(OwnerAddress,',','.'), 1)



Select *
From [Portfolio Project]..NashvilleHousing



-------------------------------------------------------------------------------------------------------------

--	Changing Y & N to Yes & No in the "SoldAsVacant" column using CASE Statements

Select Distinct(SoldAsVacant), COUNT(SoldAsVacant)
From [Portfolio Project]..NashvilleHousing
Group by SoldAsVacant
Order by 2



Select SoldAsVacant
, CASE When SoldAsVacant = 'Y' THEN 'Yes'
       When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END

From [Portfolio Project]..NashvilleHousing


Update [Portfolio Project]..NashvilleHousing
SET SoldAsVacant = CASE When SoldAsVacant = 'Y' THEN 'Yes'
       When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END


-----------------------------------------------------------------------------------------------------------------------------

-- Removing Duplicates with use of CTE

---------- Selecting the rows of duplicates


WITH RowNumCTE as (
Select*,
	ROW_NUMBER() OVER (
	Partition by ParcelID,
				PropertyAddress,
				SalePrice,
				SaleDate,
				LegalReference
				Order by
					UniqueID
					) row_num

From [Portfolio Project]..NashvilleHousing
)
Select *
From RowNumCTE
Where row_num > 1
Order by PropertyAddress



---------- Deleting the rows of Duplicates 


WITH RowNumCTE as (
Select*,
	ROW_NUMBER() OVER (
	Partition by ParcelID,
				PropertyAddress,
				SalePrice,
				SaleDate,
				LegalReference
				Order by
					UniqueID
					) row_num

From [Portfolio Project]..NashvilleHousing
)
DELETE
From RowNumCTE
Where row_num > 1



Select *
From [Portfolio Project]..NashvilleHousing



-------------------------------------------------------------------------------------------------------------------

-- Deleting Unused Columns


Select *
From [Portfolio Project]..NashvilleHousing


Alter Table [Portfolio Project]..NashvilleHousing
Drop Column OwnerAddress, PropertyAddress, TaxDistrict, SaleDate


Select *
From [Portfolio Project]..NashvilleHousing






-- END OF PROJECT!

